// This program connects to Lamp Stack Server. Three variable names are used 

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Scanner;
import java.sql.PreparedStatement;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class Sprint {
	// Enter database name, username, and password
	// private static String DBname = "mydb";
	// private static String DBusername = "root";
	// private static String DBpassword = "CECS323cecs";
	
	// Connection string
    //private static String dbURL1 = "jdbc:mysql://localhost:3306/" + DBname + "?user=" + DBusername + "&password=" + DBpassword;
	
	//private static String dbURL1 = "jdbc:mysql://192.168.189.134:3306/empDB?user=cecs323b&password=cecs323";
	
	//These connect to school server
	private static String dbURL1 = "jdbc:mysql://cecs-db01.coe.csulb.edu:3306/cecs323h26?user=cecs323h26&password=ahse5o";
	//private static String dbURL1 = "jdbc:mysql://cecs-db01.coe.csulb.edu:3306/cecs323h15?user=cecs323h15&password=ii3beu";
	
	//private static String dbURL1 = "jdbc:mysql://localhost:3306/mydb?user=root&password=CECS323cecs";
	private static Connection conn1 = null;
	private static Statement stmnt = null;

	public static void main(String[] args) throws SQLException {
		CreateConnection();
		SelectOption();
		shutdown();
	}

	// Create connection
	private static void CreateConnection() {
		try {
			conn1 = DriverManager.getConnection(dbURL1);
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public static void SelectOption() throws SQLException {
		Scanner input = new Scanner(System.in);
			// menu
			System.out.println("\n\nManage Records Menu");
			System.out.println(
					"______________________________________________________________________________________________________");
			System.out.println("1. CRUD Stakeholder");
			System.out.println("2. CRUD Scrum Team Members");
			System.out.println("3. CRUD UserStory");
			System.out.println("4. Create Sprint");
			System.out.println("5. Add user stories to sprint backlog");
			System.out.println("6. Features to operate user stories of backlog");
            System.out.println("7. List developer and Sprints");
            System.out.println("8. List developer that is part of a Sprint");
            System.out.println("9. Quit");
			System.out.println("Enter Your Choice: ");
	        int options = input.nextInt();
			System.out.print("\n");
			while(options != 9){
			switch (options) {
			case 1:
				//CRUD stakeholders
				System.out.println("1. Create stakeholder");
				System.out.println("2. Read stakeholder");
				System.out.println("3. Update stakeholder");
				System.out.println("4. Delete stakeholder");
				int opt1 = input.nextInt();
				if(opt1 == 1){
				try{
					System.out.println("Creating a new stakeholder... ");
					System.out.println("Enter stakeholder role: ");
					String Stakeholderrole = input.next();
					System.out.println("Enter stakholder name: ");
					String Stakeholdername = input.next();
					System.out.println("Enter sprint team id: ");
					String Sprintteamid = input.next();
					System.out.println("Enter StakeholderID: ");
					int Stakeholderid = input.nextInt();
					String insert = "INSERT INTO Stakeholders(StakeholderRole, SprintTeamMembers_TeamMemberName, SprintTeam_idSprintTeam, StakeholderID)"   		
							+ " VALUES (?, ?, ?, ?)";
					PreparedStatement prep = (PreparedStatement) ((Connection) conn1).prepareStatement(insert);
					prep.setString(1, Stakeholderrole);
					prep.setString(2, Stakeholdername);
					prep.setString(3,  Sprintteamid);
					prep.setInt(4, Stakeholderid);
					//executes prepare statement
					prep.execute();
					}
				    catch (SQLException ex) {
				        ex.printStackTrace();
				    }
				}
				else if(opt1 == 2){
					 try{
				            stmnt = conn1.createStatement();
				           //establishes results of the table
				            ResultSet results = stmnt.executeQuery("select * from Stakeholders");
				            ResultSetMetaData rsmd = results.getMetaData();
				            int numberCols = rsmd.getColumnCount();
				            for (int i=1; i<=numberCols; i++) {
				                //printColumnNames
				                System.out.print(rsmd.getColumnLabel(i)+"\t");
				            }
				            System.out.println("\n------------------------------------------------------------------------");
				//prints the table along with the recipe
				            while(results.next())
				            {
				            	String StakeholderName = results.getString(1); 
				            	String StakeholderRole = results.getString(2);
				            	String idSprintTeam = results.getString(3);
				                int StakeholderID = results.getInt(4);
				                System.out.println(StakeholderName + "\t\t" + StakeholderRole+ "\t\t" + idSprintTeam + "\t\t" + StakeholderID);
				            }
				            results.close();
				            stmnt.close();
				        }
				        catch (SQLException ex) {
				            ex.printStackTrace();
				        }
				}
				else if(opt1 == 3){
					System.out.println("Enter stakeholder id to update: ");
					int StakeID = input.nextInt();
					System.out.println("Enter new info, Stakeholdername: ");
					String StakeholderName = input.next();
					System.out.println("Enter stakeholder role: ");
					String StakeholderRole = input.next();
					System.out.println("Enter sprint team id: ");
					String idSprintteam = input.next();
				    String insert = "UPDATE Stakeholders SET StakeholderRole = ?, SprintTeamMembers_TeamMemberName = ?, SprintTeam_idSprintTeam = ? WHERE StakeholderID = ?";
				    PreparedStatement prep = (PreparedStatement) ((Connection) conn1).prepareStatement(insert);
				    prep.setString(1, StakeholderName);
				    prep.setString(2, StakeholderRole);
				    prep.setString(3, idSprintteam);
				    prep.setInt(4, StakeID);
				    prep.executeUpdate();
				}
				else if(opt1 == 4){
					System.out.println("Delete a stakeholder(ID): ");
				    int IDdlt = input.nextInt();
				    //sql statement for delete from table
				    PreparedStatement st = conn1.prepareStatement("DELETE from Stakeholders WHERE StakeholderID =" + IDdlt);
				    st.executeUpdate();
					}
					else{
						System.out.println("Try again");
						opt1 = input.nextInt();
					}
				break;	
			case 2:
				//CRUD Sprint team members
				System.out.println("1. Create sprint team member");
				System.out.println("2. Read sprint team member");
				System.out.println("3. Update sprint team member");
				System.out.println("4. Delete sprint team member");
				int opt2 = input.nextInt();
				if(opt2 == 1){
				try{
					System.out.println("Creating a sprint team member... ");
					System.out.println("Enter sprint team member id: ");
					int SprintTeamMemberID = input.nextInt();
					System.out.println("Enter team member name: ");
					String teamMemberName = input.next();
					System.out.println("Enter id sprint team: ");
					String idSprintTeam= input.next();
					String insert = "INSERT INTO SprintTeamMembers(SprintTeamMemberID, TeamMemberName, SprintTeam_idSprintTeam)"   		
							+ "\nVALUES (?, ?, ?)";
					PreparedStatement prep = (PreparedStatement) ((Connection) conn1).prepareStatement(insert);
					prep.setInt(1, SprintTeamMemberID);
					prep.setString(2, teamMemberName);
					prep.setString(3, idSprintTeam);
					//executes prepare statement
					prep.execute();
					}
				    catch (SQLException ex) {
				        ex.printStackTrace();
				    }
				}
				else if(opt2 == 2){
					try{
			            stmnt = conn1.createStatement();
			           //establishes results of the table
			            ResultSet results = stmnt.executeQuery("select * from SprintTeamMembers");
			            ResultSetMetaData rsmd = results.getMetaData();
			            int numberCols = rsmd.getColumnCount();
			            for (int i=1; i<=numberCols; i++) {
			                //printColumnNames
			                System.out.print(rsmd.getColumnLabel(i)+"\t\t");
			            }
			            System.out.println("\n----------------------------------------------------------------------------");
			            //prints the table along with the recipe
			            while(results.next())
			            {
			            	int id = results.getInt(1); 
			            	String SprintTeamMemberName= results.getString(2);
			                String SprintTeamID = results.getString(3);
			                System.out.println(id + "\t\t\t\t" + SprintTeamMemberName + "\t\t\t\t" + SprintTeamID);
			            }
			            results.close();
			            stmnt.close();
			        }
			        catch (SQLException ex) {
			            ex.printStackTrace();
			        }
				}
				else if(opt2 == 3){
					System.out.println("Enter sprint team member id to update: ");
					int sprintteammemberid = input.nextInt();
					System.out.println("Enter new info, Sprint team member name: ");
					String sprintteammembername = input.next();
					System.out.println("Enter sprint team id: ");
					String idSprintteam  = input.next();
				    String insert = "UPDATE SprintTeamMembers SET TeamMemberName = ?, SprintTeam_idSprintTeam= ? WHERE SprintTeamMemberID = ?";
				    PreparedStatement prep = (PreparedStatement) ((Connection) conn1).prepareStatement(insert);
				    prep.setString(1, sprintteammembername);
				    prep.setString(2, idSprintteam);
				    prep.setInt(3, sprintteammemberid);
				    prep.executeUpdate();
				}
				else if(opt2 == 4){
				System.out.println("Delete a team member(ID): ");
			    int IDdlt = input.nextInt();
			    //sql statement for delete from table
			    PreparedStatement st = conn1.prepareStatement("DELETE from SprintTeamMembers WHERE SprintTeamMemberID=" + IDdlt);
			    st.executeUpdate();
				}
				else{
					System.out.println("Try again");
					opt2 = input.nextInt();
				}
				break;
			case 3:
				//CRUD UserStory
				System.out.println("1. Create UserStory");
				System.out.println("2. Read UserStory");
				System.out.println("3. Update UserStory");
				System.out.println("4. Delete UserStory");
				int opt3 = input.nextInt();
				if(opt3 == 1){
					try{
						System.out.println("Making UserStory... ");
						System.out.println("Enter UserStory title: ");
						String title = input.next();
						System.out.println("Enter Project ID: ");
						int project = input.nextInt();
						System.out.println("Enter sprint id: ");
						int idSprint = input.nextInt();
						System.out.println("Enter id of sprint team: ");
						String idSprintteam = input.next();
						System.out.println("Enter userstory description: ");
						String Description = input.next();
						System.out.println("Enter userstory status: ");
						String userstorystatus= input.next();
						String insert = "INSERT INTO UserStory(Title, Project, Sprint_idSprint, Sprint_SprintTeam_idSprintTeam, Description, UserStoryStatus)"   		
								+ "\nVALUES (?, ?, ?, ?, ?, ?)";
						PreparedStatement prep = (PreparedStatement) ((Connection) conn1).prepareStatement(insert);
						prep.setString(1, title);
						prep.setInt(2, project);
						prep.setInt(3, idSprint);
						prep.setString(4, idSprintteam);
						prep.setString(5, Description);
						prep.setString(6, userstorystatus);
						//executes prepare statement
						prep.execute();
						}
					    catch (SQLException ex) {
					        ex.printStackTrace();
					    }	
				}
				else if(opt3 == 2)	{
					 try{
				            stmnt = conn1.createStatement();
				           //establishes results of the table
				            ResultSet results = stmnt.executeQuery("select * from UserStory");
				            ResultSetMetaData rsmd = results.getMetaData();
				            int numberCols = rsmd.getColumnCount();
				            for (int i=1; i<=numberCols; i++) {
				                //printColumnNames
				                System.out.print(rsmd.getColumnLabel(i)+"\t\t");
				            }
				            System.out.println("\n------------------------------------------------------------------------------------------------------------------------------");
				            while(results.next())
				            {
				            	String title = results.getString(1); 
				            	int project = results.getInt(2);
				            	int idsprint = results.getInt(3);
				                String idSprintteam  = results.getString(4);
				                String description = results.getString(5);
				                String userstorystat = results.getString(6);
				                
				                System.out.println(title + "\t\t" + project + "\t\t" + idsprint + "\t\t" + idSprintteam + "\t\t" + description + "\t\t" + userstorystat);
				            }
				            results.close();
				            stmnt.close();
				        }
				        catch (SQLException ex) {
				            ex.printStackTrace();
				        }
				}
				else if(opt3 == 3){
					System.out.println("Enter Userstory project id to update: ");
					int project = input.nextInt();
					System.out.println("Enter new title of project: ");
					String title = input.next();
					System.out.println("Enter sprint id: ");
					int Sprintid = input.nextInt();
					System.out.println("Enter id of sprint team: ");
					String sprintteamid = input.next();
					System.out.println("Enter description of userstory: ");
					String description = input.next();
					System.out.println("Enter user story status(finished/started): ");
					String userstorystatus = input.next();
				    String insert = "UPDATE SprintTeamMembers SET Title = ?, Sprint_idSprint = ?, Sprint_SprintTeam_idSprintTeam = ?, Description = ?, UserStoryStatus= ? WHERE Project = ?";
				    PreparedStatement prep = (PreparedStatement) ((Connection) conn1).prepareStatement(insert);
				    prep.setString(1, title);
				    prep.setInt(2, Sprintid);
				    prep.setString(3, sprintteamid);
				    prep.setString(4, description);
				    prep.setString(5, userstorystatus);
				    prep.setInt(6, project);
				}
				else if(opt3 == 4){
				System.out.println("Delete a userstory project: ");
				int IDdlt = input.nextInt();
				//sql statement for delete from table
				PreparedStatement st = conn1.prepareStatement("DELETE from UserStory WHERE Project=" + IDdlt);
				st.executeUpdate();	
				}
				else{
					System.out.println("Try again");
					opt2 = input.nextInt();
				}
				break;
			case 4:
				//Create Sprint
					try{
						System.out.println("Making new Sprint... ");
						System.out.println("Enter sprint id: ");
						int idSprint = input.nextInt();
						System.out.println("Enter start date of sprint: ");
						String startDate = input.next();
						System.out.println("Enter end date of sprint: ");
						String endDate = input.next();
						System.out.println("Enter status of sprint(finished/started): ");
						String status = input.next();
						System.out.println("Enter id of sprint team");
						String idSprintteam = input.next();
						String insert = "INSERT INTO Sprint(idSprint, startDate, endDate, status, SprintTeam_idSprintTeam)"   		
								+ "\nVALUES (?, ?, ?, ?, ?)";
						PreparedStatement prep = (PreparedStatement) ((Connection) conn1).prepareStatement(insert);
						prep.setInt(1, idSprint);
						prep.setString(2, startDate);
						prep.setString(3, endDate);
						prep.setString(4, status);
						prep.setString(5, idSprintteam);
						//executes prepare statement
						prep.execute();
						}
					    catch (SQLException ex) {
					        ex.printStackTrace();
					    }

			    break;
			case 5:
				//Add user stories to the backlog
		        break;
			case 6:
				//Features to operate user stories of backlog
				break;
			case 7:
				//List developer and Sprints
				break;
			case 8:
				//List developer that is part of a Sprint
				try{
  					 System.out.println("Enter Sprint Team ID");
  					 String idSprintTeam = input.next();
  					 stmnt = conn1.createStatement();
  			        	//establishes results of the table
  			         	ResultSet results = stmnt.executeQuery("select TeamMemberName from SprintTeamMembers WHERE SprintTeam_idSprintTeam ='" + idSprintTeam + "'");
  			         	ResultSetMetaData rsmd = results.getMetaData();
  			         	int numberCols = rsmd.getColumnCount();
  			         	for (int i=1; i<=numberCols; i++) {
  			             	//printColumnNames
  			             	System.out.println(rsmd.getColumnLabel(i)+"\t\t");
  			         	}
  			         	while(results.next())
  			         	{
  			        		 String name = results.getString(1);
  			             	System.out.println(name );
  			         	}
  			         	results.close();
  			         	stmnt.close();	 
  				 }
  		     	catch (SQLException ex) {
  		         	ex.printStackTrace();
  		     	}
  				 break;
			case 9:
				shutdown();
				break;
			}
		    System.out.println("Enter an option: ");
			options = input.nextInt();
		}  
	}    
			
	// Terminate connection at end
	private static void shutdown() {
		try {
			if (stmnt != null) {
				stmnt.close();
			}
			if (conn1 != null) {
				conn1 = DriverManager.getConnection(dbURL1 + "shutdown=true");
				conn1.close();
			}
		} catch (SQLException slqEx) {

		}
	}
}

